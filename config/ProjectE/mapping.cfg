# Configuration file

enabledmappers {
    # Allows other Mods to add Recipes to the EMC Calculation. [default: true]
    B:APICustomConversionMapper=true

    # Allows other mods to set EMC values using the ProjectEAPI [default: true]
    B:APICustomEMCMapper=true

    # Add Conversions for Crafting Recipes gathered from net.minecraft.item.crafting.CraftingManager [default: true]
    B:CraftingMapper=false

    # Uses json files within config/ProjectE/customConversions/ to add values and conversions [default: true]
    B:CustomConversionMapper=true

    # Uses the `custom_emc.json` File to add EMC values. [default: true]
    B:CustomEMCMapper=true

    # Adds Conversions for fluid container items and fluids. [default: true]
    B:FluidMapper=true

    # Blacklist some OreDictionary names from getting an EMC value [default: true]
    B:OreDictionaryMapper=true

    # Add Conversions for `FurnaceRecipes` [default: true]
    B:SmeltingMapper=true
}


general {
    # Want to take a look at the internals of EMC Calculation? Enable this to write all the conversions and setValue-Commands to config/ProjectE/mappingdump.json [default: false]
    B:dumpEverythingToFile=false

    # Log known EMC Exploits. This can not and will not find all possible exploits. This will only find exploits that result in fixed/custom emc values that the algorithm did not overwrite. Exploits that derive from conversions that are unknown to ProjectE will not be found. [default: true]
    B:logEMCExploits=true

    # When the next EMC mapping occurs write the results to config/ProjectE/pregenerated_emc.json and only ever run the mapping again when that file does not exist, this setting is set to false, or an error occurred parsing that file. [default: false]
    B:pregenerate=false
}


mapperconfigurations {

    oredictionarymapper {
        # Set EMC=0 for everything that has an OD Name that starts with `ore`, `dust` or `crushed` besides `dustPlastic` [default: true]
        B:blacklistOresAndDusts=true
    }

    customconversionmapper {
        # Read file: ODdefaults.json? [default: true]
        B:ODdefaults=false

        # Read file: defaults.json? [default: true]
        B:defaults=false

        # Read file: metals.json? [default: true]
        B:metals=false
    }

    craftingmapper {

        irecipeimplementations {
            B:enableCraftTweakerRecipeMapper=true
            B:enablePECustomRecipeMapper=true
            B:enableRecipeStagesRecipeMapper=true
            B:enableVanillaRecipeMapper=true
        }

    }

    smeltingmapper {
        # If X has a value and is smelted from Y, Y will get a value too. This is an experimental thing and might result in Mappings you did not expect/want to happen. [default: false]
        B:doBackwardsMapping=false
    }

    apicustomemcmapper {

        customemcpriorities {
            I:defiledlandspriority=1
            I:expequivpriority=1
            I:thaumicequivalencepriority=1
        }

        permissions {

            expequiv {
                S:IntermediateFakeItemsUsedInRecipes=both
                S:astralsorcery=both
                S:avaritia=both
                S:botania=both
                S:draconicevolution=both
                S:embers=both
                S:minecraft=both
                S:thaumcraft=both
                S:thermalfoundation=both
            }

            defiledlands {
                S:IntermediateFakeItemsUsedInRecipes=both
                S:defiledlands=both
            }

            thaumicequivalence {
                S:IntermediateFakeItemsUsedInRecipes=both
                S:forge=both
                S:minecraft=both
                S:rusticthaumaturgy=both
                S:thaumcraft=both
                S:thaumictinkerer=both
            }

        }

    }

    apicustomconversionmapper {

        allow {
            B:expequiv=true
            B:thaumicequivalence=true
        }

    }

}


